#!/usr/bin/env python3

"""
Rohit Dhill <rohit.dhill.533@gmail.com>
Assignment 2: A Python script for Cloudtrail log analysis
"""

import json
from collections import Counter
import requests
import os


def is_this_ip_private(ip: str):
    ip_octet = ip.split(".")
    if len(ip_octet) != 4:
        raise ValueError(f"Invalid IP Address {ip}")

    ip_octet = [int(octet) for octet in ip.split(".")]

    if ip_octet[0] == 10:
        return True
    elif ip_octet[0] == 172:
        if ip_octet[1] >= 16 and ip_octet[1] <= 31:
            return True
    elif ip_octet[0] == 192 and ip_octet[1] == 168:
        return True
    else:
        return False


def analyse_ip_reputation(ipAddress: str):
    url = f"https://api.abuseipdb.com/api/v2/check?ipAddress={ipAddress}"
    api_key = "5a4f2f6d2be84821e09ddf1c2885e6f6060c4bc33b2406f3f388c58ea45944e33c8d2458fc54ee90"
    headers = {
        "Key": api_key,
        "Accept": "application/json",
    }
    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        data = json.loads(response.text)
        return data

    except requests.exceptions.RequestException as e:
        print(f"Error checking IP {ipAddress}: {e}")
        return None


def dump_ip_reputation_json(ipList: list):
    with open("data.json", "a") as outfile:
        if not outfile.tell():
            outfile.write("[")

        for ip in ipList:
            api_data = analyse_ip_reputation(ip)
            if api_data:
                json.dump(api_data, outfile, indent=4)
                if ip != ipList[-1]:
                    outfile.write(",")

        if outfile.tell():
            outfile.write("]")


def parse_cloudtrail_log(parsed: dict):
    root_action_count = Counter()  # Root account operations
    action_count = Counter()  # Top 5 API actions
    kali_user_agents = set()  # Kali user agents
    s3_buckets = []  # S3 bucket names
    ips_count = Counter()  # Top 100 IPs for threat reputation
    ec2_instances = []  # EC2 instances

    for item in parsed["Records"]:
        action_count[item["eventName"]] += 1

        # Root user actions
        if "userIdentity" in item and "type" in item["userIdentity"]:
            if item["userIdentity"]["type"] == "Root":
                root_action_count[item["eventName"]] += 1

        # Kali user agents
        if "userAgent" in item:
            if "kali" in item["userAgent"]:
                kali_user_agents.add(item["userAgent"])

        # Public IP addresses present in the logs
        try:
            if "sourceIPAddress" in item:
                if not is_this_ip_private(item["sourceIPAddress"]):
                    ips_count[item["sourceIPAddress"]] += 1
        except ValueError:
            pass

        if item.get("errorCode") is None:
            # For checking if bucket is public, need to check some access control list
            if "eventName" in item:
                if item["eventName"] == "CreateBucket":
                    s3_buckets.append(item["requestParameters"]["bucketName"])

                # To actually check if IDMSv2 is required or not, we will have to go into the Management Console. Can't be done via parsing logs
                elif item["eventName"] == "RunInstances":
                    ec2_instances.extend(
                        item["requestParameters"]["instancesSet"]["items"]
                    )

    # Printing number of root account operations and number of times that operation has taken place
    if len(root_action_count) == 0:
        print("No root action found\n")
    else:
        print(f"Root account operations: \n")
        for root_operation, count in root_action_count.items():
            print(f"{root_operation}: {count}")
        print(f"\n")

    # Top 5 actions count
    if len(action_count) == 0:
        print("No top 5 actions found\n")
    else:
        print(f"Top 5 actions count: \n")
        for i in action_count.most_common(5):
            # i[0] would be name of the action, i[1] would be occurrences
            print(f"{i[0]}")
        print(f"\n")

    # User agents generated by Kali
    if len(kali_user_agents) == 0:
        print("No user agents generated\n")
    else:
        print(f"User agents generated by Kali: \n")
        for agent in kali_user_agents:
            print(f"{agent}")
        print(f"\n")

    # Listing out all the buckets that have been created
    if len(s3_buckets) == 0:
        print(f"No S3 buckets created\n")
    else:
        print(f"\nS3 buckets that have been created: \n")
        for bucket in s3_buckets:
            print(f"{bucket}")
        print(f"\n")

    # Printing EC2 instances that were created
    if len(ec2_instances) == 0:
        print(f"No EC2 instances created\n")
    else:
        print(f"\nEC2 instances created: \n")
        for instance in ec2_instances:
            # {'imageId': 'ami-5039cdc9', 'minCount': 1, 'maxCount': 1, 'keyName': 'Default'}
            print(f"{instance['imageId']}")
        print(f"\n")

    # IP reputation analysis
    # Top 1 IP is only being sent for reputation analysis else my API limit will get exhausted
    howManyAddressesToCount = 1
    topIPAddressesTuple = ips_count.most_common(howManyAddressesToCount)
    topIPaddressList = []
    for ip in topIPAddressesTuple:
        topIPaddressList.append(ip[0])
    dump_ip_reputation_json(topIPaddressList)


if __name__ == "__main__":
    logs_folder = "./logs"

    for filename in os.listdir(logs_folder):
        filepath = os.path.join(logs_folder, filename)
        if os.path.isfile(filepath) and filepath.endswith(".json"):
            with open(filepath, "r") as file:
                try:
                    data = json.load(file)
                    print(f"Parsing {filepath}\n")
                    print("*" * 50)
                    parse_cloudtrail_log(data)
                    print("*" * 50)
                    print(f"\n")
                except json.JSONDecodeError as e:
                    print(f"Error processing {filepath}, error: {e})")
